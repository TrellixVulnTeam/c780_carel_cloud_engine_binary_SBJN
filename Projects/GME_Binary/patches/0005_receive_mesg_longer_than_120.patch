--- portserial_m.c.orig	2019-12-12 02:15:00.548319179 -0800
+++ portserial_m.c	2019-12-12 01:53:13.080351000 -0800
@@ -65,6 +65,7 @@
 #define MB_SERIAL_TX_TOUT_MS        (100)
 #define MB_SERIAL_TX_TOUT_TICKS     pdMS_TO_TICKS(MB_SERIAL_TX_TOUT_MS) // timeout for transmission
 
+#define MB_UART_FULL_THRESH_DEFAULT 120
 /* ----------------------- Static variables ---------------------------------*/
 static const CHAR *TAG = "MB_MASTER_SERIAL";
 
@@ -101,17 +102,26 @@
 static void vMBMasterPortSerialRxPoll(size_t xEventSize)
 {
     USHORT usLength;
-
+    static volatile USHORT AlreadyRxd = 0;
     if (bRxStateEnabled) {
         if (xEventSize > 0) {
             xEventSize = (xEventSize > MB_SERIAL_BUF_SIZE) ?  MB_SERIAL_BUF_SIZE : xEventSize;
             // Get received packet into Rx buffer
-            usLength = uart_read_bytes(ucUartNumber, &ucBuffer[0], xEventSize, portMAX_DELAY);
+            usLength = uart_read_bytes(ucUartNumber, &ucBuffer[AlreadyRxd], xEventSize, portMAX_DELAY);
+            if (xEventSize == MB_UART_FULL_THRESH_DEFAULT)
+            {
+                if(ucBuffer[2] != MB_UART_FULL_THRESH_DEFAULT - 5)
+                {
+                    AlreadyRxd += MB_UART_FULL_THRESH_DEFAULT;
+                    return;
+                }
+            }
             uiRxBufferPos = 0;
-            for(USHORT usCnt = 0; usCnt < usLength; usCnt++ ) {
+            for(USHORT usCnt = 0; usCnt < usLength+AlreadyRxd; usCnt++ ) {
                 // Call the Modbus stack callback function and let it fill the stack buffers.
                 ( void )pxMBMasterFrameCBByteReceived(); // calls callback xMBRTUReceiveFSM()
             }
+            AlreadyRxd = 0;
             // The buffer is transferred into Modbus stack and is not needed here any more
             uart_flush_input(ucUartNumber);
             ESP_LOGD(TAG, "RX_T35_timeout: %d(bytes in buffer)\n", (uint32_t)usLength);
