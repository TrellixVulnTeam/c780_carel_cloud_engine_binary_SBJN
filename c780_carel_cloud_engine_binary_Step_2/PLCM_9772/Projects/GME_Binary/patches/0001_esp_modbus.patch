--- esp_modbus_master.c.orig	2021-10-14 01:46:16.936120000 -0700
+++ esp_modbus_master.c	2021-10-14 05:33:47.613215000 -0700
@@ -18,6 +18,16 @@
 #include "esp_modbus_master.h"  // for public interface defines
 #include "esp_modbus_callbacks.h"   // for callback functions
 
+#include "mbutils.h"				// CHIEBAO A.
+
+
+extern USHORT param_buffer[2];   	// CHIEBAO A.
+extern eMBErrorCode retError;
+
+
+//#define __STRICT_MASTER_MODBUS    // CHIEBAO A.
+
+
 // This file implements public API for Modbus master controller.
 // These functions are wrappers for interface functions of the controller
 static mb_master_interface_t* master_interface_ptr = NULL;
@@ -189,6 +199,9 @@
                             USHORT usNDiscrete)
 {
     eMBErrorCode error = MB_ENOERR;
+	
+#ifdef __STRICT_MASTER_MODBUS
+	
     MB_MASTER_CHECK((master_interface_ptr != NULL),
                     ESP_ERR_INVALID_STATE,
                     "Master interface is not correctly initialized.");
@@ -196,6 +209,61 @@
                     ESP_ERR_INVALID_STATE,
                     "Master interface is not correctly initialized.");
     error = master_interface_ptr->master_reg_cb_discrete(pucRegBuffer, usAddress, usNDiscrete);
+#else
+
+    USHORT iRegIndex, iRegBitIndex, iNReg;
+    UCHAR *pucDiscreteInputBuf;
+    USHORT DISCRETE_INPUT_START;
+    USHORT DISCRETE_INPUT_NDISCRETES;
+    USHORT usDiscreteInputStart;
+    iNReg = usNDiscrete / 8 + 1;
+
+    pucDiscreteInputBuf = (USHORT*)param_buffer;
+
+    DISCRETE_INPUT_START = 0;
+    DISCRETE_INPUT_NDISCRETES = 0xFFFF;
+
+    /* it already plus one in modbus function method. */
+    usAddress--;
+
+    if ((usAddress >= DISCRETE_INPUT_START) && (usAddress + usNDiscrete <= DISCRETE_INPUT_START + DISCRETE_INPUT_NDISCRETES))
+    {
+        iRegIndex = (USHORT)(usAddress) / 8;
+        iRegBitIndex = (USHORT)(usAddress) % 8;
+
+        /* write current discrete values with new values from the protocol stack. */
+        while (iNReg > 1)
+        {
+            xMBUtilSetBits(&pucDiscreteInputBuf[iRegIndex++], iRegBitIndex, 8,
+                           *pucRegBuffer++);
+            iNReg--;
+        }
+        /* last discrete */
+        usNDiscrete = usNDiscrete % 8;
+        /* xMBUtilSetBits has bug when ucNBits is zero */
+        if (usNDiscrete != 0)
+        {
+            //xMBUtilSetBits(&pucDiscreteInputBuf[iRegIndex++], iRegBitIndex,
+            //               usNDiscrete, *pucRegBuffer++);
+
+        //
+		// NOTE 2021/06/23 A.CHIEBAO
+		// in our case iNReg is always == 1, we read one COIL per time
+		//   
+		param_buffer[0] = 0;
+		param_buffer[1] = 0;
+
+		param_buffer[0] = (USHORT)xMBUtilGetBits(pucRegBuffer, 0, 1);
+
+       }
+    }
+    else
+    {
+    	error = MB_ENOREG;
+    }
+#endif
+	
+	retError = error;
     return error;
 }
 
@@ -203,6 +271,8 @@
         USHORT usNCoils, eMBRegisterMode eMode)
 {
     eMBErrorCode error = MB_ENOERR;
+	
+#ifdef __STRICT_MASTER_MODBUS
     MB_MASTER_CHECK((master_interface_ptr != NULL),
                     ESP_ERR_INVALID_STATE,
                     "Master interface is not correctly initialized.");
@@ -211,6 +281,85 @@
                     "Master interface is not correctly initialized.");
     error = master_interface_ptr->master_reg_cb_coils(pucRegBuffer, usAddress,
                                                         usNCoils, eMode);
+#else
+
+	USHORT iRegIndex, iRegBitIndex, iNReg;
+	UCHAR *pucCoilBuf;
+	USHORT COIL_START;
+	USHORT COIL_NCOILS;
+
+
+	iNReg = usNCoils / 8 + 1;
+
+	pucCoilBuf = param_buffer;
+
+	COIL_START = 0;
+	COIL_NCOILS = 0xFFFF;
+
+
+	/* if mode is read,the master will write the received date to buffer. */
+	//eMode = MB_REG_WRITE;
+
+	/* it already plus one in modbus function method. */
+	usAddress--;
+
+    if ((usAddress >= COIL_START) && (usAddress + usNCoils <= COIL_START + COIL_NCOILS))
+    {
+        iRegIndex = (USHORT)(usAddress) / 8;
+
+        iRegBitIndex = (USHORT)(usAddress) % 8;
+
+        switch (eMode)
+        {
+            /* read current coil values from the protocol stack. */
+        case MB_REG_READ:
+            
+			//
+			// NOTE 2021/06/23 A.CHIEBAO
+			// in our case iNReg is always == 1, we read one COIL per time
+			//		
+			while (iNReg > 0)
+            {
+            	param_buffer[0] = 0;
+            	param_buffer[1] = 0;
+
+            	param_buffer[0] = (USHORT)xMBUtilGetBits(pucRegBuffer, 0, 1);
+
+                iNReg--;
+            }
+            //pucRegBuffer--;
+            /* last coils */
+            //usNCoils = usNCoils % 8;
+            /* filling zero to high bit */
+            //*pucRegBuffer = *pucRegBuffer << (8 - usNCoils);
+            //*pucRegBuffer = *pucRegBuffer >> (8 - usNCoils);
+            break;
+
+        /* write current coil values with new values from the protocol stack. */
+        case MB_REG_WRITE:
+            while (iNReg > 1)
+            {
+                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, 8,
+                               *pucRegBuffer++);
+                iNReg--;
+            }
+            /* last coils */
+            usNCoils = usNCoils % 8;
+            /* xMBUtilSetBits has bug when ucNBits is zero */
+            if (usNCoils != 0)
+            {
+                xMBUtilSetBits(&pucCoilBuf[iRegIndex++], iRegBitIndex, usNCoils, *pucRegBuffer++);
+            }
+            break;
+        }
+    }
+    else
+    {
+    	error = MB_ENOREG;
+    }
+#endif
+
+	retError = error;																																																								
     return error;
 }
 
@@ -218,6 +367,8 @@
         USHORT usNRegs, eMBRegisterMode eMode)
 {
     eMBErrorCode error = MB_ENOERR;
+
+#ifdef __STRICT_MASTER_MODBUS
     MB_MASTER_CHECK((master_interface_ptr != NULL),
                     ESP_ERR_INVALID_STATE,
                     "Master interface is not correctly initialized.");
@@ -226,6 +377,61 @@
                     "Master interface is not correctly initialized.");
     error = master_interface_ptr->master_reg_cb_holding(pucRegBuffer, usAddress,
                                                         usNRegs, eMode);
+#else
+    USHORT iRegIndex;
+    USHORT *pusRegHoldingBuf;
+    USHORT REG_HOLDING_START;
+    USHORT REG_HOLDING_NREGS;
+    USHORT usRegHoldStart;
+
+    pusRegHoldingBuf = param_buffer;
+
+    REG_HOLDING_START = 0;
+    REG_HOLDING_NREGS = 0xFFFF;
+
+    /* if mode is read, the master will write the received date to buffer. */
+    eMode = MB_REG_WRITE;
+
+    /* it already plus one in modbus function method. */
+    usAddress--;
+
+    if ((usAddress >= REG_HOLDING_START) && (usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS))
+    {
+        iRegIndex = 0;		//usAddress-1;
+        switch (eMode)
+        {
+        /* read current register values from the protocol stack. */
+        case MB_REG_READ:
+            while (usNRegs > 0)
+            {
+                *pucRegBuffer++ = (UCHAR)(pusRegHoldingBuf[0] >> 8);
+                *pucRegBuffer++ = (UCHAR)(pusRegHoldingBuf[0] & 0xFF);
+
+                iRegIndex++;
+                usNRegs--;
+            }
+            break;
+        /* write current register values with new values from the protocol stack. */
+        case MB_REG_WRITE:
+            while (usNRegs > 0)
+            {
+                pusRegHoldingBuf[iRegIndex] = *pucRegBuffer++ << 8;          //usNRegs-1
+                pusRegHoldingBuf[iRegIndex]|= *pucRegBuffer++;               // usNRegs-1
+
+                iRegIndex++;
+                usNRegs--;
+            }
+            break;
+        }
+    }
+    else
+    {
+    	error = MB_ENOREG;
+    }
+#endif
+
+    retError = error;
+														
     return error;
 }
 
@@ -233,6 +439,7 @@
                                 USHORT usNRegs)
 {
     eMBErrorCode error = MB_ENOERR;
+#ifdef __STRICT_MASTER_MODBUS
     MB_MASTER_CHECK((master_interface_ptr != NULL),
                     ESP_ERR_INVALID_STATE,
                     "Master interface is not correctly initialized.");
@@ -240,5 +447,42 @@
                     ESP_ERR_INVALID_STATE,
                     "Master interface is not correctly initialized.");
     error = master_interface_ptr->master_reg_cb_input(pucRegBuffer, usAddress, usNRegs);
+
+#else
+
+	USHORT iRegIndex;
+	USHORT *pusRegInputBuf;
+	USHORT REG_INPUT_START;
+	USHORT REG_INPUT_NREGS;
+
+
+	pusRegInputBuf = (USHORT*)param_buffer;
+
+	REG_INPUT_START = 0;
+	REG_INPUT_NREGS = 0xFFFF;
+
+
+	/* it already plus one in modbus function method. */
+	usAddress--;
+
+	if ((usAddress >= REG_INPUT_START) && (usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS))
+	{
+		iRegIndex = 0;  //usAddress;
+		while (usNRegs > 0)
+		{
+			pusRegInputBuf[iRegIndex] = *pucRegBuffer++ << 8;    // iRegIndex
+			pusRegInputBuf[iRegIndex] |= *pucRegBuffer++;        // iRegIndex
+
+			iRegIndex++;
+			usNRegs--;
+		}
+	}
+	else
+	{
+		error = MB_ENOREG;
+	}
+#endif
+
+	retError = error;			
     return error;
 }
